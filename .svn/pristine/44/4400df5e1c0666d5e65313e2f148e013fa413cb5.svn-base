package model;

import java.awt.geom.AffineTransform;

public class RectanglePaintStrategy extends ShapePaintStrategy {
	  /**
	   * No parameter constructor that creates a prototype ellipse that 
	   * has twice the width as height but an average radius of 1.
	   * An AffineTranform for internal use is instantiated.
	   */
	  public RectanglePaintStrategy(){
	    this(new AffineTransform(), 0, 0, 3.0, 1.0);
	  }
	  
	  /**
	   * Constructor that allows the specification of the location, x-radius and y-radius
	   * of the prototype ellipse.   The AffineTransform to use is given.
	   * @param at The AffineTransform to use for internal calculations
	   * @param x floating point x-coordinate of center of circle
	   * @param y floating point y-coordinate of center of circle
	   * @param width floating point x-radius of the circle (ellipse)
	   * @param height floating point y-radius of the circle (ellipse)
	   */
	  public RectanglePaintStrategy(AffineTransform at, double x, double y, double width, double height){
	    super(at, RectangleShapeFactory.Singleton.makeShape(x,y,width,height));
	  }
	
//	double xScale = Math.random();
//	double yScale = Math.random();
//	
//	
//	public RectanglePaintStrategy() {
//		
//	}
//
//	/**
//	 * By default, does nothing for initialization.
//	 */
//	public void init(Ball ball){
//		
//	}
//
//	/**
//	 * Paints a rectangle with a random width:height ratio on the given graphics
//	 * context using the color and radius provided by the host. 
//	 * @param g The Graphics context that will be paint on
//	 * @param host The host Ball that the required information will be pulled from.
//	 */
//	@Override
//	public void paint(Graphics g, Ball ball) {
//		int halfSide = ball.getRad();
//		g.setColor(ball.getCol());
//		
//		int width = (int) (halfSide * (1.0 + xScale));
//		int height = (int) (halfSide * (1.0 +yScale));
//		
//		g.fillRect(ball.getLoc().x - halfSide, ball.getLoc().y - halfSide, width, height);
//	} 
}